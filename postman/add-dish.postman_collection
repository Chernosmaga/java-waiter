{
	"info": {
		"_postman_id": "a668b4bf-5627-4bee-a6d3-4e5607ea0c28",
		"name": "java-waiter/add-dish",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28184234"
	},
	"item": [
		{
			"name": "dish",
			"item": [
				{
					"name": "add dish id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has dish create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test dish 'dishId' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('dishId');\r",
									"    pm.expect(jsonData.dishId, '\"dishId\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test dish 'title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData.title, '\"title\" must be \"Свекольник\"').to.eql('Свекольник');\r",
									"});\r",
									"pm.test(\"Test dish 'isAvailable' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isAvailable');\r",
									"    pm.expect(jsonData.isAvailable, '\"isAvailable\" field must be \"true\"').to.true;\r",
									"});\r",
									"pm.test(\"Test dish 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData.quantity, '\"quantity\" field must be 10').to.eql(10);    \r",
									"});\r",
									"pm.test(\"Test dish 'timeLimit' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timeLimit');\r",
									"    pm.expect(jsonData.timeLimit, '\"timeLimit\" field must be 10').to.eql(10);\r",
									"});\r",
									"pm.test(\"Test dish 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData.price, '\"price\" field must be 300.0').to.eql(300.0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Свекольник\",\r\n    \"isAvailable\": \"true\",\r\n    \"quantity\": \"10\",\r\n    \"timeLimit\": \"10\",\r\n    \"price\": \"300.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "add dish id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has dish create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test dish 'dishId' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('dishId');\r",
									"    pm.expect(jsonData.dishId, '\"dishId\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test dish 'title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData.title, '\"title\" must be \"Шоколадный фондан\"').to.eql('Шоколадный фондан');\r",
									"});\r",
									"pm.test(\"Test dish 'isAvailable' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isAvailable');\r",
									"    pm.expect(jsonData.isAvailable, '\"isAvailable\" must be \"true\"').to.true;\r",
									"});\r",
									"pm.test(\"Test dish 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData.quantity, '\"quantity\" field must be 3').to.eql(3);    \r",
									"});\r",
									"pm.test(\"Test dish 'timeLimit' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timeLimit');\r",
									"    pm.expect(jsonData.timeLimit, '\"timeLimit\" field must be 15').to.eql(15);\r",
									"});\r",
									"pm.test(\"Test dish 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData.price, '\"price\" field must be 600.0').to.eql(600.0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Шоколадный фондан\",\r\n    \"isAvailable\": \"true\",\r\n    \"quantity\": \"3\",\r\n    \"timeLimit\": \"15\",\r\n    \"price\": \"600.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "fail add dish with no title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isAvailable\": \"false\",\r\n    \"quantity\": \"10\",\r\n    \"timeLimit\": \"10\",\r\n    \"price\": \"800.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "fail add dish with negative price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Свекольник\",\r\n    \"isAvailable\": \"true\",\r\n    \"quantity\": \"10\",\r\n    \"timeLimit\": \"10\",\r\n    \"price\": \"-300.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "fail add dish with negative timeLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Свекольник\",\r\n    \"isAvailable\": \"true\",\r\n    \"quantity\": \"10\",\r\n    \"timeLimit\": \"-10\",\r\n    \"price\": \"300.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "fail add existing dish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 or 400\", function () {\r",
									"     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Свекольник\",\r\n    \"isAvailable\": \"true\",\r\n    \"quantity\": \"10\",\r\n    \"timeLimit\": \"10\",\r\n    \"price\": \"300.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "update dish id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Has dish create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test dish 'dishId' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('dishId');\r",
									"    pm.expect(jsonData.dishId, '\"dishId\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test dish 'title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData.title, '\"title\" must be \"Свекольник\"').to.eql('Свекольник');\r",
									"});\r",
									"pm.test(\"Test dish 'isAvailable' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isAvailable');\r",
									"    pm.expect(jsonData.isAvailable, '\"isAvailable\" must be \"true\"').to.true;\r",
									"});\r",
									"pm.test(\"Test dish 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData.quantity, '\"quantity\" field must be 10').to.eql(10);    \r",
									"});\r",
									"pm.test(\"Test dish 'timeLimit' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timeLimit');\r",
									"    pm.expect(jsonData.timeLimit, '\"timeLimit\" field must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test dish 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData.price, '\"price\" field must be 300.0').to.eql(300.0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dishId\": \"1\",\r\n    \"title\": \"Свекольник\",\r\n    \"isAvailable\": \"true\",\r\n    \"quantity\": \"10\",\r\n    \"timeLimit\": \"5\",\r\n    \"price\": \"300.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "fail update dish if not exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dishId\": \"999\",\r\n    \"title\": \"Филе миньон\",\r\n    \"isAvailable\": \"true\",\r\n    \"quantity\": \"2\",\r\n    \"timeLimit\": \"30\",\r\n    \"price\": \"800.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "delete dish id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dish/:dishId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dish",
								":dishId"
							],
							"variable": [
								{
									"key": "dishId",
									"value": "2",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "fail get dish id 999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Has error response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dish/:dishId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dish",
								":dishId"
							],
							"variable": [
								{
									"key": "dishId",
									"value": "999",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get dish with id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"pm.test(\"Get dish response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test dish 'dishId' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('dishId');\r",
									"    pm.expect(jsonData.dishId, '\"dishId\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test dish 'title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData.title, '\"title\" must be \"Свекольник\"').to.eql('Свекольник');\r",
									"});\r",
									"pm.test(\"Test dish 'isAvailable' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isAvailable');\r",
									"    pm.expect(jsonData.isAvailable, '\"isAvailable\" must be \"true\"').to.true;\r",
									"});\r",
									"pm.test(\"Test dish 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('quantity');\r",
									"    pm.expect(jsonData.quantity, '\"quantity\" field must be 10').to.eql(10);    \r",
									"});\r",
									"pm.test(\"Test dish 'timeLimit' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('timeLimit');\r",
									"    pm.expect(jsonData.timeLimit, '\"timeLimit\" field must be 5').to.eql(5);\r",
									"});\r",
									"pm.test(\"Test dish 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('price');\r",
									"    pm.expect(jsonData.price, '\"price\" field must be 300.0').to.eql(300.0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dish/:dishId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dish",
								":dishId"
							],
							"variable": [
								{
									"key": "dishId",
									"value": "1",
									"description": "(Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get dishes list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list dish response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test dish[0] 'dishId' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('dishId');\r",
									"    pm.expect(jsonData[0].dishId, '\"dishId\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test dish[0] 'title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('title');\r",
									"    pm.expect(jsonData[0].title, '\"title\" must be \"Свекольник\"').to.eql('Свекольник');\r",
									"});\r",
									"pm.test(\"Test dish[0] 'isAvailable' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isAvailable');\r",
									"    pm.expect(jsonData[0].isAvailable, '\"isAvailable\" must be \"true\"').to.true;\r",
									"});\r",
									"pm.test(\"Test dish[0] 'quantity' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('quantity');\r",
									"    pm.expect(jsonData[0].quantity, '\"quantity\" field must be 10').to.eql(10);\r",
									"});\r",
									"pm.test(\"Test dish[0] 'timeLimit' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('timeLimit');\r",
									"    pm.expect(jsonData[0].timeLimit, '\"timeLimit\" field must be 5').to.eql(5);    \r",
									"});\r",
									"pm.test(\"Test dish[0] 'price' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('price');\r",
									"    pm.expect(jsonData[0].price, '\"price\" field must 300.0').to.eql(300.0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "delete dishes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				},
				{
					"name": "get dishes list empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list film response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/dish"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}